"use server";

import { Prompt } from './promptStorage';
import { sendToChatGPT, sendToGeminiModel } from './openaiService';
import { sendEmail } from './emailService';

/**
 * Interface for server processing result
 */
export interface ServerProcessingResult {
  processedPrompts: string[];
  errors: Array<{
    promptId: string;
    message: string;
  }>;
}

/**
 * Process prompts on the server side
 * This function is called from the client but executes on the server
 * 
 * @param prompts Array of prompts to process
 * @returns Processing result with IDs of processed prompts and any errors
 */

function constructPropmt(promptContent:string):string  {
  const systemPrompt = `You are an expert in generating briefing based on user input.
  Based on a user prompt, you should generate a briefing to summraize
  - current news, trend
  - important udpates

  User Prompt: ${promptContent}

  Please output in concise, professional, and clear language. Make it logical.
  
  `;
  return systemPrompt 
};

export async function processPromptsOnServer(prompts: Prompt[]): Promise<ServerProcessingResult> {
  const result: ServerProcessingResult = {
    processedPrompts: [],
    errors: [],
  };

  // Process each prompt
  for (const prompt of prompts) {
    try {
      console.log(prompt)
      // Send the prompt to ChatGPT
      // const chatGptResponse = await sendToChatGPT(prompt.prompt);
      const chatGptResponse = await sendToGeminiModel(prompt.prompt);
      console.log(chatGptResponse )
      
      if (chatGptResponse.error) {
        throw new Error(`Gemini API error: ${chatGptResponse.error}`);
      }

      console.log(chatGptResponse.content)

      const promptFull = constructPropmt(chatGptResponse.content)
      
      // Send the response via email
      const emailResult = await sendEmail({
        to: prompt.email,
        subject: `Your Rooster Report: ${prompt.prompt.substring(0, 50)}...`,
        html: `
          <h1>Your Rooster Report</h1>
          <p><strong>Prompt:</strong> ${prompt.prompt}</p>
          <hr />
          <div>${promptFull}</div>
          <hr />
          <p><small>Generated by Rooster at ${new Date().toLocaleString()}</small></p>
        `,
      });
      
      if (!emailResult.success) {
        throw new Error(`Email sending error: ${emailResult.error}`);
      }
      
      // Add to successfully processed prompts
      result.processedPrompts.push(prompt.id);
    } catch (error) {
      console.error(`Error processing prompt ${prompt.id}:`, error);
      result.errors.push({
        promptId: prompt.id,
        message: error instanceof Error ? error.message : 'Unknown error occurred',
      });
    }
  }

  return result;
}